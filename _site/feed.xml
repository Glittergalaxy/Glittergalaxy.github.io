<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Glittergalaxy</title>
    <description>private blog
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 20 Nov 2017 14:54:20 +0800</pubDate>
    <lastBuildDate>Mon, 20 Nov 2017 14:54:20 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>左右布局</title>
        <description>&lt;p&gt;左边固定宽度，右边自适应布局的实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.wrapper{
    height:800px;
    width:100%;
}
.left{
    width:200px;
}
.right{
    height:100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;float方法或绝对定位方法
    &lt;ul&gt;
      &lt;li&gt;左边元素 float:left;或 position:absolute;&lt;/li&gt;
      &lt;li&gt;右边元素 margin-left:200px;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;flex布局
    &lt;ul&gt;
      &lt;li&gt;父元素 display:flex;&lt;/li&gt;
      &lt;li&gt;右边 flex:1;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;table布局
    &lt;ul&gt;
      &lt;li&gt;父元素 display:table;&lt;/li&gt;
      &lt;li&gt;左边、右边 display:table-cell;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;display:table-cell可实现以下功能
    &lt;ul&gt;
      &lt;li&gt;不定高元素垂直居中&lt;/li&gt;
      &lt;li&gt;等高实现&lt;/li&gt;
      &lt;li&gt;左侧定宽，右侧自适应布局&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 17 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/layout-css/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/layout-css/</guid>
        
        <category>css</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>移动端适配方案</title>
        <description>&lt;p&gt;移动端适配方案实现方式&lt;/p&gt;

&lt;h4 id=&quot;移动端适配&quot;&gt;移动端适配&lt;/h4&gt;

&lt;p&gt;一、 基于flexible插件的自适应&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;获取dpr,若已存在则使用当前dpr&lt;br /&gt;
 dpr即 window.devicePixelRatio,dpr返回当前显示设备的物理像素分辨率与CSS像素分辨率的比率。简单来说，这告诉浏览器应该使用多少个屏幕的实际像素来绘制一个CSS像素。&lt;/li&gt;
  &lt;li&gt;设置viewport中的scale = 1/dpr
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scale=no&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;根据deviceWidth以及dpr计算并设置rem大小&lt;br /&gt;
 deviceWidth/dpr&amp;gt;540按照540计算，rem = deviceWidth*dpr/10，设计图分成10等分每一等分为rem的单位大小;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;二、 基于vw的自适应&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;vw浏览器支持&lt;br /&gt;
CSS3新加属性，chrome/firefox/IE9+支持。android browser4.4+支持，chrome for android39支持。1vw等于视窗高度的1%。视窗高度指window.innerHeight包含了底部滚动条高度（如果有的话）&lt;/li&gt;
  &lt;li&gt;其余相关属性&lt;br /&gt;
vh:viewport height
vmin:vw 和vh中较小的那个。&lt;/li&gt;
  &lt;li&gt;postcss插件&lt;br /&gt;
根据vw计算原理，如果是ipone6,1vw=7.5px。那么我们在写css时只需以vw为单位写样式。利用postcss-px-to-viewport,书写样式时以px为单位，插件会编译自动计算其对应的vw值。相当于浏览器自己提供了一套适应性解决方案，和flexible原理相同，但是由于计算误差，可能会存在问题。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 16 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/mobile-flexible/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/mobile-flexible/</guid>
        
        <category>mobile</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>vue消息组件</title>
        <description>&lt;p&gt;vue实现消息组件&lt;/p&gt;

&lt;h4 id=&quot;1-组件之间传递信息的方法&quot;&gt;1. 组件之间传递信息的方法&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;vuex 所有组件之间都可以传递&lt;/li&gt;
  &lt;li&gt;props 父子组件传递信息&lt;/li&gt;
  &lt;li&gt;$parent 父子组件传递信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-基于props书写组件&quot;&gt;2. 基于props书写组件&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 父组件

&amp;lt;message :type=&quot;msg.type&quot; :show=&quot;msg.show&quot; :msg=&quot;msg.msg&quot;  @visible-change=&quot;modalVisibleChange&quot;&amp;gt;&amp;lt;/message&amp;gt;
//绑定方法
export default {
    data(){
        return {
            msg:{
                type:'loading',
                show:true,
                msg:'加载中'
            }
        }
    },
    methods:{
        //set message box show/type/content/showtime
        modalVisibleChange(val,msg,type,time){
            this.msg.show = val;
            if(msg){
                this.msg.msg = msg;
            }
            if(type){
                this.msg.type = type;
            }
            if(time){
                setTimeout(() =&amp;gt; {
                    this.msg.show = false;
                },time);
            }
        }
    }
}

- 子组件

&amp;lt;template&amp;gt;
    &amp;lt;div v-if=&quot;show&quot; class=&quot;message&quot; transition=&quot;fade&quot;&amp;gt;
        &amp;lt;div class=&quot;icons-box tcenter&quot;&amp;gt;
            &amp;lt;img src=&quot;../assets/success.png&quot; v-if=&quot;type=='success'&quot;&amp;gt;
            &amp;lt;img src=&quot;../assets/success.png&quot; v-if=&quot;type=='fail'&quot;&amp;gt;
            &amp;lt;img src=&quot;../assets/error.png&quot; v-if=&quot;type=='error'&quot;&amp;gt;
            &amp;lt;img src=&quot;../assets/loading.png&quot; v-if=&quot;type=='loading'&quot; class=&quot;loading&quot;&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;tcenter&quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

export default {
    name:'message',
    props:['type','msg','show'],
    watch:{
        show:function(val){
            if(val &amp;amp;&amp;amp; this.type!='loading'){
                setTimeout(() =&amp;gt;{
                    this.$emit(&quot;visible-change&quot;,false);
                },3000)
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;3-原理&quot;&gt;3. 原理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;子组件通过props获取父组件的属性，通过$emit方法触发父组件定义的方法，父组件在响应方法中修改属性的show/type等的值。&lt;/li&gt;
  &lt;li&gt;当父组件需要显示消息组件时，将show/type/msg等属性内容传递给子组件，当用户手动点击关闭子组件时，子组件利用$emit触发父组件对应的方法修改响应的show/type/msg属性并通过props传递给子组件。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 06 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/vue-message-component/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/vue-message-component/</guid>
        
        <category>vue</category>
        
        <category>component</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>美化range元素</title>
        <description>&lt;p&gt;HTML5原生range元素在不同浏览器中的样式不一样且不太美观，因此有两种方式实现较美观的range。一种是美化原生range元素，另一种则是自己实现一个range组件。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    /*range panel*/
    .slider{
        margin:0 2.6rem;
        height:100%;
    }
    .slider&amp;gt;input[type='range']{
        width:100%;
        height: 0.3rem;
        height:3.2rem\0;
        border-radius: 0.3rem; /*将轨道设为圆角的*/
        background: -webkit-linear-gradient(left,#f6a128, #f6a128) no-repeat #e1e1e1;
        background-size:50% 100%;
    }
    input[type=range] {
        -moz-appearance: none;
        -webkit-appearance: none;  
        padding:0;
        border:0;
        position:relative;
        top:-.3rem;
    }
    input[type=range]::-webkit-slider-thumb {
        -webkit-appearance: none;
        height: 2rem;
        width: 2rem;
        margin-top: -.4rem; 
        background: #ffffff; 
        border-radius: 50%;
        border: solid 1px #e1e1e1; 
        box-shadow: 0 2px 2px 0 rgba(0,0,0,0.10), 0 3px 3px 0 rgba(0,0,0,0.05);
    }

    /*moz*/
    input[type=range]::-moz-range-track {
        height: 0.3rem;
        border-radius: 0.3rem; 
    }
    input[type=range]::-moz-range-thumb {
        -webkit-appearance: none;
        height: 2rem;
        width: 2rem;
        margin-top: -.4rem; 
        background: #ffffff; 
        border-radius: 50%;
        border: solid 1px #e1e1e1; 
        box-shadow: 0 2px 2px 0 rgba(0,0,0,0.10), 0 3px 3px 0 rgba(0,0,0,0.05);
    }
    input[type=range]::-moz-range-progress {
        background:linear-gradient(#f6a128, #f6a128) no-repeat;
        height: 0.3rem;    
        border-radius: 0.3rem;
    }

    /*IE*/
    input[type=range]::-ms-track {
        border-color: transparent;
        color: transparent;
        height:.3rem;
        border-radius:.3rem; 
    }

    input[type=range]::-ms-thumb {
        height: 2rem;
        width: 2rem;
        margin-top: -.35rem; 
        background: #ffffff; 
        border-radius: 50%; 
        border: solid 1px #e1e1e1;
        box-shadow: 0 2px 2px 0 rgba(0,0,0,0.10), 0 3px 3px 0 rgba(0,0,0,0.05); 
    }

    input[type=range]::-ms-fill-lower {
        height: .3rem;
        border-radius: .3rem;
        background: linear-gradient(#f6a128, #f6a128) no-repeat;
    }

    input[type=range]::-ms-fill-upper {
        height: .3rem;
        border-radius: .3rem;
        background: #e1e1e1;
    }
    /*range panel end*/

    为兼容webkit
    需要配合js设置backgroundSize
    var points = document.getElementById(&quot;points&quot;);
    var value = points.value*10;
    points.style.backgroundSize = value+'% 100%';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Mon, 06 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/range/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/range/</guid>
        
        <category>html5</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>angular4.0入门</title>
        <description>&lt;p&gt;angular4.0入门笔记&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装脚手架或者quickstart
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g angular-cli
或
git clone https://github.com/angular/quickstart.git quickstart
npm install
npm start
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;创建工程项目
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng new Project_Name
cd Project_Name
ng serve
或
cd quick start
npm install
npm start
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;angular-cli其他命令
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng g component Component_Name
ng g service Service_Name
ng g directive Module_Name
ng g pipe Pipe_Name
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建的新项目目录结构&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; - node_modules
 - src
     - app
         - app.component.ts
         - app.module.ts
     - main.ts
     - styles.css
     - index.html
     - systemjs.config.js
     - tsconfig.json
 - package.json
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;component 书写规则&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1. 导入修饰符
 import { Component } from '@angular/core';

 2.声明component
 @Component({
     selector:'my-app',
     template:`
     &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;
     &amp;lt;input [(ngModel)]=&quot;hero.name&quot;/&amp;gt;
     `
     或
     templateUrl:'./a.html',
     styles:[``],
     或
     styleUrls:['./a.css']
     //使用``在ts中写html,双大括号进行单向数据绑定
 })

 3.导出
 export class AppComponent {}

 4.注：ngModel指令需从FormsMoule可选模块中导入
 app.modules.ts
 import { NgModule } from '@angular/core';
 import { BrowerModule } from '@angular/platform-browser';
 import { FormsModule } from '@angular/forms'
 @NgModule({
     imports:[
         BrowserModule,
         FormsModule
     ],
     declarations:[
         AppComponent
     ],
     bootstrap:[AppComponent]
 })
 export class AppModule{}

 5.组件可提供生命周期钩子方法和接口
 export class AppComponent implements OnInit {
     ngOnInit():void {
         this.getHeroes
     }
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;service书写规则&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1.导入
 import { Injectable } from '@angular/core';

 2.声明
 @Injectable()

 3.导出
 export class HeroService {
     getHeroes():Promise&amp;lt;Hero[]&amp;gt; {
         return Promise.resolve(HEROES)
     }
 }

 4.component中使用
 //服务提供商，注册
 - @NgModule({
     providers:[HeroService]
 })
 //实例化
 - export class HeroComponent{
     constructor({
         private heroService:HeroService
     })
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;router书写&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1.index.html确保&amp;lt;head&amp;gt;顶部有一个&amp;lt;base href=&quot;...&quot;&amp;gt;
 2.app-routing.module.ts
 - 导入
     import { RouterModule } from '@angular/router';
     import { HeroesComponent } from './heroes.component'
 - 定义path
     RouterModule.forRoot([
         {
             path:'heroes/:id',
             component:HeroesComponent,
             redirectTo:'name',
             pathMatch:'full',
         }
     ])
 3.component中的链接
 &amp;lt;a router-link=&quot;/heroes&quot;&amp;gt;&amp;lt;/a&amp;gt;
 &amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;app.module根模块书写规则&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; import { NgModule } from '@angular/core';
 import { BrowserModule } from '@angular/platform-browser';
 @NgModule({
     imports:[ BrowserModule],
     providers: [Logger],
     declarations:[AppComponent],
     exports:[AppComponent],
     bootstrap:[Appcomponent]
 })
 export class AppModules { }
    
 NgModule 是一个装饰器函数，接受一个用于描述模块属性的元数据对象，其中最重要的属性是：
 1. declarations 声明本模块所拥有的视图类，angular有三种视图类：组件、指令和管道。
 2. exports declarations的子集，可用于其他模块的组件模板。
 3. imports 本模块声明的组件模版需要的类所在的其他模块
 4. providers 服务的创建者，并加入到全局服务列表中，可用于应用任何部分。
 5. bootstrap 制定应用的主视图，只有根模块才能设置bootstrap属性。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 25 Aug 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/angular4/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/angular4/</guid>
        
        <category>angular</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
