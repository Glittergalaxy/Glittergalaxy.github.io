<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Glittergalaxy</title>
    <description>private blog
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 26 Jul 2017 15:05:27 +0800</pubDate>
    <lastBuildDate>Wed, 26 Jul 2017 15:05:27 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>vue项目文档结构</title>
        <description>&lt;p&gt;解构vue2.0项目内部文档结构&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- packageName
    - build (auto，dev和prod中配置favicon.ico,utils中配置bootstap带的fonts的publicPath)
        - utils.js 
        - webpack.base.conf.js
        - webpack.dev.conf.js
        - webpack.prod.conf.js
    - config (auto,通常需配置路径等参数)
    - dist (npm run build 后生成)
        - static
        - index.html
        - favicon.ico
    - node_modules (依赖项)
    - src (项目源文件)
        - assets (css/fonts/img)
        - components (common Components)
            - topMenu
            - leftMenu
            - pager
            - message
        - service(http请求以及常量映射)
            - http
            - api
            - commonList
        - modules (路由模块)
            - product
            - order
            - user
        - router
        - store
        - App.vue
        - main.js
    - static (静态文件)
        - js (如url配置文件，如serverurl/develop/product/prerelease)
    - favicon.ico
    - index.html
    - package.json
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;1-indexhtml-书写规则&quot;&gt;1. index.html 书写规则&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;life&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
包含html完整的文档结构
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;2-appvue-书写规则&quot;&gt;2. App.vue 书写规则&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;与一般的vue组件相同，包含html/js/css
 html部分
&amp;lt;template&amp;gt;
    &amp;lt;div id=&quot;app&quot;&amp;gt;
        &amp;lt;alert-bar&amp;gt;&amp;lt;/alert-bar&amp;gt;
        &amp;lt;top-menu v-if=&quot;index&quot;&amp;gt;&amp;lt;/top-menu&amp;gt;
        &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
通常根元素为index.html中定义的id为app的元素，且包含router-view元素（路由视图）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;3-mainjs书写规则&quot;&gt;3. main.js书写规则&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.引入项目必备
import Vue from 'vue'
import App from './App.vue'
import store from './store'
import router from './router'

2.引入公用插件以及css
import './assets/css/bootstrap.min.css'
import ElementUI from 'element-ui'
import 'element-ui/lib/theme-default/index.css'

Vue.use(ElementUI)

3.创建vue实例
new Vue({
    el:'#app',
    store,
    router,
    render: h =&amp;gt; h(App)
}).$mount('#app')

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;4-routerjs书写规则&quot;&gt;4. router.js书写规则&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.引入必备插件
import Vue from 'vue'
import VueRouter from 'vue-router'

2.引入路由组件
import Work from '../modules/work/work.vue'
import WorkAuditing from '../modules/work/auditing.vue'
import WorkAudited from '../modules/work/audited.vue'
import License from '../modules/work/license.vue'
import Authorize from '../modules/work/authorize.vue'

3.使用方法
Vue.use(VueRouter)
const routes = [
    {path:'/',redirect:'/login'},
    {path:'/order',component:'Order',redirect:'/order/list',children:[
        {path:'order/list',name:'orderList',component:orderList}
    ]}
]
export default new VueRouter({routes})

最后在main.js中注入
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;5-store书写规则-vuex官方文档&quot;&gt;5. store书写规则 &lt;a href=&quot;https://vuex.vuejs.org/zh-cn/mutations.html&quot;&gt;vuex官方文档&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.引入插件
import Vue from 'vue'
import Vuex from 'vuex'

2.使用方法
Vue.use(Vuex)
export default new Vuex.Store({
    modules:{
        
    }
})
3. modules中书写
- state
    const state = {
       current:0, 
    }
- getters
    const getters = {
        current:state =&amp;gt; state.current
    }
- actions
    const actions = {
        setCurrent({commit},page){
            commit(SET_CURRENT,page)
        }
    }
- mutations
    const mutations = {
        [SET_CURRENT](state,page){
            state.current = page;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 16 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/vue-structure/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/vue-structure/</guid>
        
        <category>vue</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>vue项目相关插件</title>
        <description>&lt;p&gt;vue项目搭建过程中所需插件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所有插件在项目中使用大前提为&lt;/strong&gt; npm install –save 在项目运行时所需用到的插件&lt;/p&gt;

&lt;h5 id=&quot;1-axios-用于发送http请求&quot;&gt;1. axios 用于发送http请求&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;引入方式
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import axios from 'axios'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;所需设置
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//设置传输数据类型
axios.defaults.headers.post['Content-Type'] = 'application/json;charset=utf-8';
//设置服务器url
axios.defaults.baseURL = serviceUrl;
//设置headers
axios.defaults.headers.common = {
  UserId:Cookies.get('UserId')
}
//配置请求方法，以下为发送文件上传请求示例
export default {
  file: function(url,data){
      return new Promise((resolve,reject) =&amp;gt; {
          let form = new FormData() //实例化一个formdata类型
          form.append(file,data.file) //将所传文件放入formdata类型数据中
          axios.post(url,form,{
              method:'post',
              headers:{'Content-Type':'multiple/form-data'} //设置传输文件格式为form-data类型
          })
          .then((response) =&amp;gt; {
              resolve(response.data)
          })
          .catch((error) =&amp;gt; {
              reject(error)
          })
      })
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2-关于es6中promise对象的使用&quot;&gt;2. 关于ES6中promise对象的使用&lt;/h5&gt;

&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/?search=promise&amp;amp;x=0&amp;amp;y=0#docs/promise&quot;&gt;阮一峰的说明&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同jquery中定义的promise对象类似，prototype中有.then()方法和.catch方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- .then()方法可以有两个参数，分别为resolve和reject时的回调方法。
- .catch()方法即为.then(null,reject)的别名，用于指定发生错误时的回调函数，同时.then()方法中制定的回调函数，若异步过程产生错误，也会被catch方法捕获
- 一般来说，不要在then方法里面定义reject状告台的回调函数，总是使用catch方法,因为可以捕获到前面then方法执行的错误。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;3-js-cookie插件&quot;&gt;3. js-cookie插件&lt;/h5&gt;

&lt;p&gt;cookie使用有两处 1&amp;gt; http请求头部获取cookie 2&amp;gt;登陆后设置cookie&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;引入方式
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import * as Cookies from 'js-cookie';
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用方法
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;设置cookie Cookies.set('userid','1234',{expires:1(单位天)})
获取cookie Cookies.get('userid')
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;4-crypto-js插件&quot;&gt;4. crypto-js插件&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;引入方式
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import SHA1 from 'crypto-js/sha1'
或
import CryptoJS from 'crypto-js'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用方法
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHA1(psw).toString()
或
CryptoJS.SHA1(psw).toString()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;5-bootstrap样式&quot;&gt;5. bootstrap样式&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;引入方式
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在main.js中
import './assets/css/bootstrap.min.css'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;6-element-ui插件及样式&quot;&gt;6. element-ui插件及样式&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;引入方式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在main.js中
import ElementUI from 'elemnt-ui'
import 'element-ui/lib/theme-default/index.css'

Vue.use(ElementUI)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;使用方式&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在component中使用elemnt-ui中的元素，如
&amp;lt;el-form&amp;gt;&amp;lt;/el-form&amp;gt; form表单中带相关校验
&amp;lt;el-table&amp;gt;&amp;lt;/el-table&amp;gt; table带远程排序、选择某行、添加序号、隐藏内容等功能
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 14 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/vueproject/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/vueproject/</guid>
        
        <category>vue</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>vue-cli使用</title>
        <description>&lt;p&gt;关于vue脚手架vue-cli的使用&lt;/p&gt;

&lt;h4 id=&quot;创建vue项目&quot;&gt;创建vue项目&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;安装vue-cli
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g vue-cli
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;创建基于webpack模版的新项目
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue init webpack my-project
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;安装项目依赖
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;--save 表示项目运行中使用到的，类似bootstrap/axios/js-cookie/element-ui/vuex/crypto-js
--save-dev 表示打包时用到的，如css-loader/file-loader/style-loader等
执行 npm install
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;本地运行已搭建项目
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;更新版本到线上
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;更新版本需注意配置&quot;&gt;更新版本需注意配置&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;资源相关引用路径修改
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;config中 build下 assetsPublicPath:'./'改为相对路径
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bootstrap中的fonts引用&lt;/p&gt;

    &lt;p&gt;由于bootstrap中字体引用路径为(‘../’),而打包后的fonts和css在同一目录下，所以修改config中的utils.js,原理为修改资源引用的路径为相对路径&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(options.extract){
 return ExtractTextPlugin.extract({
     user:loaders,
     fallback:'vue-style-loader',
     publicPath:'../../' //by add
 })
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;favicon.ico问题&lt;/p&gt;

    &lt;p&gt;favicon.ico在开发环境中放在根目录下，与index.html同级，但在打包到线上环境时，需进行设置，让其在index.html中自动生成favicon的引用&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.在webpack.dev.conf.js中修改
 new HtmlWebpackPlugin({
     filename:'index.html',
     template:'index.html',
     favicon:'favicon.ico', //by add
     inject:true
 })
2.在webpack.prod.conf.js中修改
 new HtmlWebpackPlugin({
     favicon:'favicon.ico' //by add
 })
修改后打包生成的index.html中将包含favicon的引用
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;静态文件的问题&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;与src同级的目录static中存放着不进行修改和压缩的文件，使用中，可将环境配置文件serverurl放入其中。&lt;/p&gt;

&lt;p&gt;本例中，在static/js目录中创建保存着三个不同环境的server路径的js文件，利用jenkins编译时选择相应环境，并通过jenkins修改对应环境的js文件名为serverurl来修改请求的server地址，从而达到根据不同环境来请求响应的服务器的目的(存在bug,待解决)。&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/vue-cli/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/vue-cli/</guid>
        
        <category>vue</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>nodejs+express+mongo构建项目</title>
        <description>&lt;p&gt;利用nodejs + express框架 + mongo数据库搭建后台环境进行前后台交互&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://my.oschina.net/chenhao901007/blog/312367&quot;&gt;参考文档1&lt;/a&gt;
&lt;a href=&quot;http://cnodejs.org/topic/547293caa3e2aee40698df0b&quot;&gt;参考文档2&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1安装文件&quot;&gt;1.安装文件&lt;/h3&gt;
&lt;h4 id=&quot;1-安装并运行mongo&quot;&gt;1） 安装并运行mongo&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;官网下载msi安装包，点击下一步直至安装完成。&lt;/li&gt;
  &lt;li&gt;安装服务：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;安装完成后，一管理员身份运行cmd，cd到mongodb安装目录下的bin目录，然后输入：
mongod --dbpath=&quot;mongodb安装目录\data&quot; --logpath=&quot;mongodb安装目录\log\log.txt&quot; --install --serviceName MongoDB --serviceDisplayName MongoDB
此步骤中创建数据库目录同时创建日志文件，并将mongo安装为服务
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;另开一个cmd,切换到bin目录，然后输入mongo 启动数据库。&lt;/li&gt;
  &lt;li&gt;启动后，可输入命令行创建数据库等。
```&lt;/li&gt;
  &lt;li&gt;show dbs&lt;/li&gt;
  &lt;li&gt;use dbname&lt;/li&gt;
  &lt;li&gt;db.”tablename”&lt;/li&gt;
  &lt;li&gt;db.”tablename”.insert({insertObj})  //插入数据&lt;/li&gt;
  &lt;li&gt;db.”tablename”.find()   //查询数据
```
    &lt;h4 id=&quot;2-安装-express--express-generator&quot;&gt;2） 安装 express + express-generator&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;安装全局 express+express-generator即可&lt;/li&gt;
  &lt;li&gt;创建项目
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;express packagename -e -e 表示支持ejs模板引擎 默认是jaden
npm install 安装依赖项
npm start 启动项目
http://127.0.0.1:3000/在浏览器中查看
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2创建项目&quot;&gt;2.创建项目&lt;/h3&gt;
&lt;h5 id=&quot;1appjs中可修改模板引擎类型&quot;&gt;1）app.js中可修改模板引擎类型&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.set('view engine','ejs') 改为
app.set('view engine','html')
再进行注册
app.engine('.html',require('ejs').__express)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;2创建loginhtmlindexhtmlcenterhtml&quot;&gt;2）创建login.html,index.html,center.html&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;index页面创建链接，可跳转到login页面&lt;/li&gt;
  &lt;li&gt;login页面创建form表单，可提交到center页面&lt;/li&gt;
  &lt;li&gt;center页面可进行登出，回到index页面&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3连接数据库文件&quot;&gt;3）连接数据库文件&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var mongoose = require('mongoose');
var db = mongoose.createConnection('mongodb:localhost/hello');//localhost后跟之前创建的数据库名，此处不可使用connect,
var Shema = mongoose.Schema;
var userSchema = new Schema({
    name:String,
    age:String
})//创建新的模型
exports.user = db.model('user',userSchema);//与user表关联

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id=&quot;4路由配置&quot;&gt;4）路由配置&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var express = require('express');
var router = express.Router();
var user = require('../models/user').user;

router.get('/',function(req,res){
    res.render('index',{title:'index'});//制定跳转后页面且指定其title
})

router.get('/login',function(req,res){
    res.render('login',{title:'login'});//制定跳转后页面且指定其title
})

router.get('/logout',function(req,res){
    res.render('logout',{title:'logout'});//制定跳转后页面且指定其title
})

//login的form表单提交为post方式
router.post('/homepage',function(req,res){
    var queryinfo = {name:req.body.name,age:req.body.age};
    (function(){
        //查询数据库中符合查询信息的数量
        user.count(queryinfo,function(err,doc){
            if(doc == 1){
                console.log(queryinfo.name + &quot;:login success in &quot; + new Date())
                res.render('homepage',{title:&quot;homepage&quot;});
                //若为1则成功跳转到主页并提示信息
            }else{
                console.log(queryinfo.name + &quot;:failed success in &quot; + new Date())
                res.redirect('/')
                //否则返回首页
            }
        })
    })(queryinfo);
})

modules.exports = router;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;3调试工具&quot;&gt;3.调试工具&lt;/h3&gt;
&lt;p&gt;node-inspector&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;全局安装
npm i -g node-inspector
安装完成后进入项目目录
node --debug ./bin/www
即可在命令行查看错误信息
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 05 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/nodejs+express+mongo/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/nodejs+express+mongo/</guid>
        
        <category>nodejs</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>echarts-highcharts</title>
        <description>&lt;p&gt;1.说明：eCharts和highcharts功能基本相同，相较而言，highcharts图表基础配色较为美观，简单应用可选，但echarts可绘制多样类型的图，使用灵活&lt;/p&gt;

&lt;p&gt;2.引用用法差别：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;highcharts地图，中括号中为js地图文件
var world = Highcharts.geojson(Highcharts.maps[‘custom/world-palestine-highres’]);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;highcharts饼状图等图表
$(‘#lang’).highcharts(option);&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;echarts图表，第二个选项为样式模板，图表与地图引用方式一样
var errorCol = echarts.init(document.getElementById(‘errorCol’),’macarons’);
errorCol.setOption(option1);&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.详解echarts相关配置项&lt;/p&gt;

&lt;p&gt;echarts的option对象中：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;series 属性(值为数组)主要包含相关数据，图表类型以及图表特殊设置等。数组中包含的对象的属性：如data,值为数组，表示有多组数据。
    &lt;ul&gt;
      &lt;li&gt;type:标识图表类型，主要有 line/scatter/map/pie等等，其中type值为map则可增加mapType属性，标识地图的区域，如值为‘china’表示中国地图，也可缩小至省份等。&lt;/li&gt;
      &lt;li&gt;itemStyle:可设置元素的样式。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;legend 属性表示图表的说明，标注多种类型的数据等。&lt;/li&gt;
  &lt;li&gt;title 属性表示图表的标题。&lt;/li&gt;
  &lt;li&gt;tooltip 表示鼠标放在某个点上时显示的内容。&lt;/li&gt;
  &lt;li&gt;visualMap 属性表示数据筛选器，其中可设置最大最小值，以及位于图标中的位置，是否可进行过滤筛选（calculate属性）。&lt;/li&gt;
  &lt;li&gt;dataRange 表示可拖动的数据轴线，可设置显示区间。&lt;/li&gt;
  &lt;li&gt;toolbox 表示数据视图、切换图表type、另存为图片的控件。&lt;/li&gt;
  &lt;li&gt;symbol 表示点的原件，可设置effect特效，以及symbolsize元件大小（可使用函数表示），&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;echarts设置的模板如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chinaMap.setOption({
textStyle:{
    color:'#2f323b'
},
title: {
    text: '省份分布',
    left: 'center',
    textStyle: {  
        fontWeight: 'normal',              //标题颜色  
        color: '#333'  
    },  
},
tooltip: {
    trigger: 'item'
},
legend: {
    orient: 'vertical',
    left: 'left',
    data:['设备数量']
},
visualMap: {
    min: minNum,
    max: maxNum,
    left: 'left',
    top: 'bottom',
    text: ['高','低'],           // 文本，默认为数值文本
    calculable: true
},
toolbox: {
    show: true,
    orient: 'horizontal',
    right: '20px',
    top: 'top',
    feature: {
        dataView: {show: false,readOnly: true},
        restore: {},
        saveAsImage: {}
    }
},
dataRange:{
    show:true,
    color:['#0073d6',&quot;#3D77FF&quot;,&quot;#3DD8FF&quot;,&quot;#99FFFF&quot;,'#c7e9ff'],
    min:0,
    max:3000,
    calculable:true,
    textStyle:{
        color:'#333'
    }
},
series: [
    {
        name: '设备',
        type: 'map',
        mapType: 'china',
        roam: false,
        label: {
            normal: {
                show: true,
                textStyle: {
                    color: '#333'
                }
            },
            emphasis: {
                show: true
            }
        },
        itemStyle:{
            normal: {
                borderColor: '#eee',
                areaColor: '#c7e9ff'
            },
            emphasis: {
                areaColor: '#a4edba'
            }
        },
        data: dataArray
    }
]
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 28 Apr 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/echarts-highcharts/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/echarts-highcharts/</guid>
        
        <category>charts</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
