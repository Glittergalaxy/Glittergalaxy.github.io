<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Glittergalaxy</title>
    <description>private blog
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Dec 2017 13:48:36 +0800</pubDate>
    <lastBuildDate>Mon, 04 Dec 2017 13:48:36 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>数组以及对象方法总结</title>
        <description>&lt;p&gt;数组以及对象的常用方法&lt;/p&gt;
&lt;h4 id=&quot;一-数组&quot;&gt;一、 数组&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Array.prototype.forEach() 按升序为数组中每个元素执行一次提供的函数。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arr.forEach(callback(currentValue,index,array){
 //函数接收三个参数，thisArg可选，当执行时用作this的值    
}，thisArg)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;notice:无法中止或跳出forEach循环，除非抛出一个异常，不可链式调用。如果使用箭头函数表达式传入函数参数，thisArg会被忽略，因为箭头函数在词法上版定了this值。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Array.prototype.map()  创建一个新数组，其结果是该数组中每个元素都调用一个提供的函数后的结果。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let numbers = [1,5,10,15];
let doubles = numbers.map(x =&amp;gt; x**2);
//doubles is now [1,25,100,225]
let new_array = arr.map(function callback(currentValue,index,array){
 return element for new_array;
},thisArg)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array.prototype.filter() 创建一个新数组，其包含通过所提供函数实现的测试的所有元素。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function isBigEnough(value){
 return value &amp;gt;= 10;
}
var filtered = [12,5,3,129,44].filter(isBigEnough);
//filterd is [12,129,44];
var new_array = arr.filter(callback(currentValue,index,array),thisArg);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array.prototype.includes() 用来判断一个数组是否包含一个指定的值，返回true或false
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arr.includes(searchElement,fromIndex)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array,prototype.some() | Array,prototype.every() | Array.prototype.find() 测试数组中的某些元素是否通过提供的函数的测试,返回bool
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const isBigEnough = (element,index,array) =&amp;gt; {
 return element &amp;gt; 10;
}
arr.some(callback,thisArg)
var passed = [12,5,8,1,4].some(isBigEnough);
// passed is true
var passed = [12,5,8,1,4].every(isBigEnough);
// passed is false
如果找到一个符合条件的值，some返回true。
如果找到一个不符合条件的值，every返回false。
如果找到一个符合条件的值，find返回该值。
如果找到一个符合条件的值，findIndex返回该索引。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array,prototype.reduce() 对累加器和数组中的元素，从左至右应用一个函数
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arr.reduce(callback,initialValue);
//四个参数，第一个参数表示列加气累加回调的返回值，他是上一次调用回调时返回的累计值，或initialValue
callback(accumulator,currentValue,currentIndex,array);
initialValue用作第一个调用callback的accumulator的值，如果没有提供初始值，则将使用第一个元素，在没有初始值的空数组上调用reduce将报错。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array.prototype.copyWithin()  复制数组的一部分到同数组的另一位置
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arr.copyyWithin(target,start,end);
target表示索引，复制序列到该位置，如果为负数，从末尾开始计算，大于等于arr.length,将不会发生拷贝
如果end被忽略，copyWithin将会复制到arr.length;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array.prototype.toLocaleString()  数组中的元素使用各自的toLocaleString方法转成字符串，这些字符串使用一个特定语言环境的字符串（“，”）隔开&lt;/li&gt;
  &lt;li&gt;Array.from() 想要转换成数组的为伪数组对象或可迭代对象。 与map不同之处在于可以对伪数组对象或刻碟带对象进行转换。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Array.from(arraylike,mapFn,thisArg)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array.observe(arr,callback) 每次arr发生任何变化时，回调函数将被调用，调用参数为所有变化按发生顺序组成的数组。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;callback
每当数组发生变化时，使用如下参数调用该函数：
- changes
  用于表示变化的对象数组。每个变化对象的属性如下：
name: 变化的属性名。
object: 变化后的数组。
type: 用于表示变化类型的字符串。其取值为&quot;add&quot;、&quot;update&quot;、&quot;delete&quot;或 &quot;splice&quot;之一。
oldValue: 仅用于&quot;update&quot;和&quot;delete&quot;类型。变化之前的取值。
index: 仅用于&quot;splice&quot;类型。变化发生所在索引。
removed: 仅用于&quot;splice&quot;类型。被删除元素组成的数组。
addedCount: 仅用于&quot;splice&quot;类型。被添加的元素数量。
    
通过Array方法如 Array.prototype.pop( ) 触发的变化将被报告成&quot;splice&quot;变化，长度不变但索引赋值发生变化的将被报告成&quot;update&quot;变化。
    
var arr = ['a', 'b', 'c'];

Array.observe(arr, function(changes) {
  console.log(changes);
});
    
arr[1] = 'B';
// [{type: 'update', object: &amp;lt;arr&amp;gt;, name: '1', oldValue: 'b'}]
    
arr[3] = 'd';
// [{type: 'splice', object: &amp;lt;arr&amp;gt;, index: 3, removed: [], addedCount: 1}]
    
arr.splice(1, 2, 'beta', 'gamma', 'delta');
// [{type: 'splice', object: &amp;lt;arr&amp;gt;, index: 1, removed: ['B', 'c'], addedCount: 3}]
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Array.of(arguments) 创建一个具有可变数量参数的新数组实例&lt;br /&gt;
Array.of(7) //[7]&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;二对象&quot;&gt;二、对象&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Object.keys 返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和for …… in循环便利该对象时返回的顺序一致（两者的主要区别是for in循环还会枚举其原型链上的属性）
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Array 对象 */ 
let arr = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];
console.log(Object.keys(arr)); 
// ['0', '1', '2']
/* Object 对象 */ 
let obj = { foo: &quot;bar&quot;, baz: 42 }, 
 keys = Object.keys(obj);
// [&quot;foo&quot;,&quot;baz&quot;]
/* 类数组 对象 */ 
let obj = { 0 : &quot;a&quot;, 1 : &quot;b&quot;, 2 : &quot;c&quot;};
console.log(Object.keys(obj)); 
// ['0', '1', '2']
// 类数组 对象, 随机 key 排序 
let anObj = { 100: 'a', 2: 'b', 7: 'c' }; 
console.log(Object.keys(anObj)); 
// ['2', '7', '100']
/* getFoo 是个不可枚举的属性 */ 
var my_obj = Object.create(
{}, 
{ getFoo : { value : function () { return this.foo } } }
);
my_obj.foo = 1;
console.log(Object.keys(my_obj)); 
// ['foo']
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Object.assign(target,……sources) 用于将所有可枚举属性的值从一个或多个源对象复制到目标对象，他将返回目标对象。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;如果目标对象中的属性具有相同的键，则属性将被源中的属性覆盖。后来的源的属性将类似地覆盖早先的属性。
继承属性和不可枚举属性是不能被拷贝的
var obj = {a:1};
var copy = Object.assign({},obj);
//{a:1}
针对深拷贝，需要使用其他方法，因为Object.assign()拷贝的是属性值，如果源对象的属性值是一个指向对象的引用，他也只拷贝那个引用值。
let obj1 = {a:0,b:{c:0}};
let obj2 = Object.assign({},obj1);
console.log(JSON.stringify(obj2));
obj1.b.c = 3;
console.log(JSON.stringify(obj2));
//{a:0,b:{c:3}}
var o1 = {a:1};
var o2 = {b:2};
var 03 = {c:3};
var obj = Object.assign(o1,o2,o3);
console.log(obj);//{a:1,b:2,c:3}
console.log(o1);//{a:1,b:2,c:3}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Fri, 24 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/array-object/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/array-object/</guid>
        
        <category>array</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>异步请求方法</title>
        <description>&lt;p&gt;由vue项目看常用异步请求方法语法以及ES6异步请求方法&lt;/p&gt;
&lt;h4 id=&quot;一promise&quot;&gt;一、Promise&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Promise对象是一个构造函数，用来生成Promise实例,接受一个函数作为参数，而该函数的两个参数分别是resolve和reject。他们是两个函数，由js引擎提供，不用自己部署。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const promise = new Promise(function(resolve,reject){
 if(){
     resolve(value);
 }else{
     reject(error);
 }
})
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。&lt;/li&gt;
  &lt;li&gt;如果调用resolve和reject函数时带有参数，那么他们的参数会被传递给回调函数。&lt;/li&gt;
  &lt;li&gt;resolve函数的参数除了是正常的值以外，还可能是另一个Promise实例,
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const p1 = new Promise(function(resolve,reject){
// ... 
});
const p2 = new Promise(function(resolve,reject){
 // ...
 resolve(p1);
})
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;上面代码中，p1和p2都是Promise实例，但是p2的resolve方法将p1作为参数，即一个异步操作的结果是返回另一个异步操作。
注意，这里p1的状态就会传递给p2，也就是说，p1的状态决定了p2的状态，如果p1的状态是pending,那么p2的回调函数就会等待p1的状态改变。&lt;/li&gt;
  &lt;li&gt;Promise实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。他的作用式微Promise实例添加状态改变时的回调函数。then方法的第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数。then方法返回的是一个新的Promise实例，因此可以采用链式写法，即then方法后面再调用另一个then方法。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getJSON(&quot;/post.json&quot;).then(function(json){
 return json.post;
}).then(function(post){
 //...
})
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;上面的代码使用then方法，依次指定了两个回调函数，第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。第一个then方法指定的回调函数，返回的是另一个promise对象，这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化再调用相应方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;catch方法是.then(null,rejection)的别名，用于指定发生错误时的回调函数。一般来说，不要在then方法中定义reject状态的回调函数（即then的第二个参数），总是使用catch方法。理由是catch方法可以捕获前面then方法执行中的错误，也更接近同步的写法（try/catch）。因此，建议总是使用catch方法，而不是用then 方法中的第二个参数。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;promise.then(function(data){
 // success
}).catch(function(data){
 // error
})
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h4 id=&quot;二fetch&quot;&gt;二、fetch&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;浏览器兼容：firefox 39以上，chrome42以上&lt;/li&gt;
  &lt;li&gt;原理：基于Promise实现，无论如何，都会返回一个promise实例&lt;/li&gt;
  &lt;li&gt;当接收到一个代表错误的http状态码时，从fetch()返回的Promise不会被标记为reject,及时状态码是404或500，相反她会将promise状态标记为resolve，仅当网络故障或请求被阻止时，才会标记为reject。&lt;/li&gt;
  &lt;li&gt;默认情况下,fetch不会从服务端发送或接受任何cookies,如果站点依赖于用户session,则会导致未经认证的请求。（要发送cookies,必须设置credentials选项）&lt;/li&gt;
  &lt;li&gt;fetch用法以及相关api
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (window.fetch) {
 let myInit = {
     credentials: 'include',//设置发送请求时自动发送cookies
     method: type,
     headers: {
         'Accept': 'application/json',
         'Content-Type': 'application/json'
     },//对象或包含 ByteString 值的对象字面量。
     mode: &quot;cors&quot;,// 可选值为cors/no-cors/same-origin
     cache: &quot;force-cache&quot;//强制缓存
 }

 //将body转为json对象，也可能是Blob,BufferSource,FormData、URLSearchParams或者USVString对象。注意get或者head方法的请求不能包含body信息。
 if (type == 'POST') {
     Object.defineProperty(myInit, 'body', {
         value: JSON.stringify(data)
     })
 }
    
 try {
     //返回response
     const response = await fetch(url, myInit);
     //response对象可以处理多种格式，json()/blob()/arrayBuffer()/formData()/text()
     //response格式处理完后返回的是一个Promise对象，需要.then或者 await后才能使用
     const responseJson = await response.json();
     return responseJson
 } catch (error) {
     throw new Error(error)
 }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;get请求示例
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//html
fetch('user.html').then(function(response){
 return response.text();
}).then(function(body){
 document.body.innerHTML = body;
})
//图片
var myImage = document.querySelector('img');
fetch('flower.jpg').then(function(response){
 return response.blob();
})
.then(function(myBlob){
 var objectURL = URL.createObjectURL(myBlob);
 myImage.src = objectURL;
})
//JSON
fetch(url)
.then(function(response){
 return response.json();
}).then(function(data){
 console.log(data);
}).catch(function(error){
 console.log(&quot;oops,error&quot;);
})
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h4 id=&quot;三awaitasync&quot;&gt;三、await/async&lt;/h4&gt;
  &lt;/li&gt;
  &lt;li&gt;async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。&lt;/li&gt;
  &lt;li&gt;async函数的返回值是promise对象，可以用then方法指定下一步的操作。同时也可以作为await命令的参数。&lt;/li&gt;
  &lt;li&gt;async函数返回的Promise对象，必须等到内部所有的await命令后面的Promise对象执行完，才会发生状态改变。
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;async function timeout(ms){
 await new Promise((resolve) =&amp;gt; {
     setTimeout(resolve,ms);
 })
}
async function asyncPrint(value,ms){
 await timeout(ms);
 console.log(value);
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 22 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/promise-async/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/promise-async/</guid>
        
        <category>promise</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>补充html5基础知识</title>
        <description>&lt;p&gt;补充html5基础知识&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;meta对象
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- content  'telephone=no','text/html;charset=gb2312','width=device-width;maximum-scale=1.0;user-scale=1.0;'
- name 'format-detection','viewport'
- httpEquiv 'charset','expires','set-cookie','Content-Type',
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;html5新属性
    &lt;ul&gt;
      &lt;li&gt;video [controls,autoplay,width,height,loop,src,preload] ogg文件适用于firefox、opera、chrome,safari文件必须是peg4类型。&lt;/li&gt;
      &lt;li&gt;audio [controls,autoplay,loop,src,preload]&lt;/li&gt;
      &lt;li&gt;drag drop 任何元素都可以拖放&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;img ondragstart=drap(event) draggable=&quot;true&quot; id=&quot;drag1&quot;/&amp;gt;
 &amp;lt;div ondrop=&quot;drop(event)&quot; ondropover=&quot;allowDrop(event)&quot; id=&quot;drop1&quot;&amp;gt;&amp;lt;/div&amp;gt;

 function drap(ev){
     ev.preventDefault();
     ev.dataTransfer.setData(&quot;Text&quot;,ev.target.id) 
 }

 function allowDrop(ev){
     ev.preventDefault();
 }

 function drop(ev){
     ev.preventDefault();
     var data = ev.dataTransfer.getData(&quot;Text&quot;);
     ev.target.appendChild(document.getElementById(data));
 }

 拖动开始：ondragstart,触发后设置被拖动数据类型和值
 event.dataTransfer.setData(&quot;Text&quot;,ev.target.id);

 拖动到某一位置：ondragover,默认元素不可拖动，此时需阻止默认处理方法event.preventDefault();  

 拖动结束：ondrop,触发后获取到被拖动元素
 var data = event.dataTransfer.getData(&quot;Text&quot;);
 event.target.appendChild(document.getElementById(data));
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;canvas [width,height]  - svg&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1. 获取到canvas，创建context对象
  var c = document.getElementById(&quot;canvas&quot;);
  var ctx = c.getContext(&quot;2d&quot;);

  2. 绘制线条
  ctx.moveTo(10,10);//移动到某一个点
  ctx.lineTo(150,50);//线条画到某一点
  ctx.stroke();//填充

  3. 绘制圆形
  ctx.fillStyle=&quot;#000&quot;;//填色
  ctx.beginPath();//开始
  ctx.arc(x,y,r,startAngle,endAngle,顺时针或逆时针);//画圆
  ctx.closePath();//结束
  ctx.fill();//填充

  4. 渐变
  var rect = ctx.createLinearGradient(0,0,175,50);//矩形区域
  rect.addColorStop(0,&quot;#fff&quot;);
  rect.addColorStop(1,&quot;#000&quot;);//渐变色
  ctx.fillStyle = rect;//设置渐变色为填充颜色
  ctx.fillRect(0,0,175,50);//画矩形  

  5. 图像
  var img = new Image();
  img.src = &quot;flower.png&quot;;//创建img对象并设置其属性
  ctx.drawImage(img,0,0);//画出图像

  canvas与svg比较
  1.依赖分辨率、不依赖
  2.不支持事件处理器、支持事件处理器
  3.弱的文本渲染能力、最适合带有大型渲染程序的应用程序，比如谷歌地图
  4.适合图像密集型游戏，其中的许多对象会被频繁重绘、不适合游戏应用
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Geolocation API 定位&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  if(navigator.geolocation){
      navigator.geolocation.getCurrentPosition(showPosition,showError);
  }

  function showPosition(position){
      x.innerHTML = &quot;latitude&quot;+position.coords.latitude+&quot;longtitude&quot;+position.coords.longtitude;
        
  }

  function showError(error){
      switch(error.code){
          case error.PERMISSION_DENIED:
              return &quot;user denied&quot;
              break;
          case error.POSITION_UNAVAILABLE:
              return &quot;location unavailable&quot;
              break;
          case error.TIMEOUT:
              return &quot;timeout&quot;
              break;
          case error.UNKNOW_ERROR:
              return &quot;unknow error&quot;
              break;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;localStorage sessionStorage 客户端存储数据&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  1. localStorage
  无时间限制
  2. sessionStorage
  针对一个session的数据存储，当用户关闭浏览器窗口后数据被删除。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用缓存 application cache 除了IE不支持&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/html5-base/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/html5-base/</guid>
        
        <category>css</category>
        
        <category>html5</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>左右布局</title>
        <description>&lt;p&gt;左边固定宽度，右边自适应布局的实现&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.wrapper{
    height:800px;
    width:100%;
}
.left{
    width:200px;
}
.right{
    height:100%;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;float方法或绝对定位方法
    &lt;ul&gt;
      &lt;li&gt;左边元素 float:left;或 position:absolute;&lt;/li&gt;
      &lt;li&gt;右边元素 margin-left:200px;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;flex布局
    &lt;ul&gt;
      &lt;li&gt;父元素 display:flex;&lt;/li&gt;
      &lt;li&gt;右边 flex:1;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;table布局
    &lt;ul&gt;
      &lt;li&gt;父元素 display:table;&lt;/li&gt;
      &lt;li&gt;左边、右边 display:table-cell;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;display:table-cell可实现以下功能
    &lt;ul&gt;
      &lt;li&gt;不定高元素垂直居中&lt;/li&gt;
      &lt;li&gt;等高实现&lt;/li&gt;
      &lt;li&gt;左侧定宽，右侧自适应布局&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 17 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/layout-css/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/layout-css/</guid>
        
        <category>css</category>
        
        
        <category>posts</category>
        
      </item>
    
      <item>
        <title>移动端适配方案</title>
        <description>&lt;p&gt;移动端适配方案实现方式&lt;/p&gt;

&lt;h4 id=&quot;移动端适配&quot;&gt;移动端适配&lt;/h4&gt;

&lt;p&gt;一、 基于flexible插件的自适应&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;获取dpr,若已存在则使用当前dpr&lt;br /&gt;
 dpr即 window.devicePixelRatio,dpr返回当前显示设备的物理像素分辨率与CSS像素分辨率的比率。简单来说，这告诉浏览器应该使用多少个屏幕的实际像素来绘制一个CSS像素。&lt;/li&gt;
  &lt;li&gt;设置viewport中的scale = 1/dpr
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scale=no&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;根据deviceWidth以及dpr计算并设置rem大小&lt;br /&gt;
 deviceWidth/dpr&amp;gt;540按照540计算，rem = deviceWidth*dpr/10，设计图分成10等分每一等分为rem的单位大小;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;二、 基于vw的自适应&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;vw浏览器支持&lt;br /&gt;
CSS3新加属性，chrome/firefox/IE9+支持。android browser4.4+支持，chrome for android39支持。1vw等于视窗高度的1%。视窗高度指window.innerHeight包含了底部滚动条高度（如果有的话）&lt;/li&gt;
  &lt;li&gt;其余相关属性&lt;br /&gt;
vh:viewport height
vmin:vw 和vh中较小的那个。&lt;/li&gt;
  &lt;li&gt;postcss插件&lt;br /&gt;
根据vw计算原理，如果是ipone6,1vw=7.5px。那么我们在写css时只需以vw为单位写样式。利用postcss-px-to-viewport,书写样式时以px为单位，插件会编译自动计算其对应的vw值。相当于浏览器自己提供了一套适应性解决方案，和flexible原理相同，但是由于计算误差，可能会存在问题。&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Thu, 16 Nov 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/posts/mobile-flexible/</link>
        <guid isPermaLink="true">http://localhost:4000/posts/mobile-flexible/</guid>
        
        <category>mobile</category>
        
        
        <category>posts</category>
        
      </item>
    
  </channel>
</rss>
